{"version":3,"sources":["types/FilterParam.ts","App.tsx","helpers/helpers.ts","utils/fetchClient.ts","types/ErrorType.ts","api/todos.ts","Loader.ts","types/PageRouters.ts","components/Header/Header.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/Footer/Footer.tsx","components/Error/Error.tsx","Pages/TodoPage.tsx","utils/useLocalStorage.ts","Pages/NotFoundPage.tsx","index.tsx"],"names":["FilterParam","App","className","filterTodos","todos","param","normalize","includes","slice","All","filter","todo","Active","completed","Completed","counterOfActiveTodos","length","checkCompletedTodo","some","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","ErrorType","client","addTodo","userId","newTodo","deleteTodo","todoId","patchTodo","title","Loader","React","createContext","PageRouters","Header","setTitle","handleFormSubmit","toggleCompletedAllTodo","countActiveTodo","hasTodos","type","classNames","active","onClick","aria-labelledby","onSubmit","placeholder","value","onChange","TodoItem","memo","removeTodo","isToggleAll","handleUpdateTodoFormSubmit","isOnRender","id","useState","setCompleted","updateTodoTitle","setUpdateTodoTitle","isLoading","setIsLoading","newTodoTitle","setNewTodoTitle","isCancel","setIsCancel","inputRef","useRef","useEffect","current","focus","handleChange","todoCompleted","a","saveNewUpdateTodoTitle","cansel","loadingContext","useContext","onDoubleClick","checked","e","target","onBlur","onKeyUp","key","ref","TodoList","tempTodo","map","Footer","Object","values","link","to","isActive","selected","charAt","toUpperCase","forEach","errorType","hasError","onNotificationClose","errorMessage","setErrorMessage","Add","Delete","Update","Load","EmptyTitle","timer","clearTimeout","hidden","aria-label","USER_ID","TodoPage","setTodos","setHasError","None","setErrorType","setTempTodo","loadingTodo","setLoadingTodo","isSending","setIsSending","setCountActiveTodo","setIsToggleAll","setIsOnRender","initialValue","parse","localStorage","getItem","setData","storageData","setItem","useLocalStorage","storageTodos","setStorageTodos","pathname","useLocation","fetchTodos","todosFromServer","addNewTodo","useCallback","oldTodos","showError","error","hideError","prevTodo","todoForDelete","addNewTodoInList","downloadNewTodo","updateTodo","newTitle","useMemo","Provider","preventDefault","trim","NotFoundPage","ReactDOM","render","path","Home","element","index","NotFound","document","getElementById"],"mappings":"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","file":"static/js/main.24d2ab70.chunk.js","sourcesContent":["export enum FilterParam {\n  All = 'all',\n  Completed = 'completed',\n  Active = 'active',\n}\n","import React from 'react';\nimport { Outlet } from 'react-router-dom';\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"todoapp\">\n      <Outlet />\n    </div>\n  );\n};\n","import { FilterParam } from '../types/FilterParam';\nimport { Todo } from '../types/Todo';\n\nexport const filterTodos = (\n  todos: Todo[],\n  param: string,\n) => {\n  const normalize = param.includes('/') ? param.slice(1) : param;\n\n  return normalize !== FilterParam.All\n    ? todos.filter(todo => {\n      switch (normalize) {\n        case FilterParam.Active:\n          return !todo.completed;\n\n        case FilterParam.Completed:\n          return todo.completed;\n\n        default:\n          return todo;\n      }\n    })\n    : todos;\n};\n\nexport const counterOfActiveTodos = (todos: Todo[]) => {\n  return todos.filter(todo => !todo.completed).length;\n};\n\nexport const checkCompletedTodo = (todos: Todo[]) => {\n  return todos.some(todo => todo.completed);\n};\n","import { RequestMethod } from '../types/RequestMethod';\nimport { Todo } from '../types/Todo';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: Todo | null = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Oops something went wrong. Data loading error.');\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: Todo) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: <T>(url: string) => request<T>(url, 'DELETE'),\n};\n","export enum ErrorType {\n  None = 'None',\n  Load = 'Load',\n  Add = 'Add',\n  Delete = 'Delete',\n  Update = 'Update',\n  EmptyTitle = 'EmptyTitle',\n}\n","import { Todo } from '../types/Todo';\nimport { client } from '../utils/fetchClient';\n\nexport const getTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\nexport const addTodo = (userId: number, newTodo: Todo): Promise<Todo> => {\n  return client.post<Todo>(`/todos?userId=${userId}`, newTodo);\n};\n\nexport const deleteTodo = (todoId: number) => {\n  return client.delete(`/todos/${todoId}`);\n};\n\nexport const patchTodo = (\n  todoId: number,\n  completed?:boolean,\n  title?: string,\n) => {\n  return client.patch(`/todos/${todoId}`, { completed, title });\n};\n","import React from 'react';\n\nexport const Loader = React.createContext([0]);\n","export enum PageRouters {\n  Home = '/',\n  All = '/all',\n  Active = '/active',\n  Completed = '/completed',\n  NotFound = '*',\n}\n","import React from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  title: string,\n  setTitle: (event: React.ChangeEvent<HTMLInputElement>) => void,\n  handleFormSubmit: (event: React.FocusEvent<HTMLFormElement>) => void,\n  toggleCompletedAllTodo: () => void,\n  countActiveTodo: number,\n  hasTodos: boolean,\n};\n\nexport const Header: React.FC<Props> = ({\n  title,\n  setTitle,\n  handleFormSubmit,\n  toggleCompletedAllTodo,\n  countActiveTodo,\n  hasTodos,\n}) => {\n  return (\n    <header className=\"todoapp__header\">\n      {hasTodos\n        && (\n          <button\n            type=\"button\"\n            className={classNames(\n              'todoapp__toggle-all',\n              {\n                active: countActiveTodo === 0,\n              },\n            )}\n            onClick={toggleCompletedAllTodo}\n            aria-labelledby=\"completedAllTodos\"\n          />\n        )}\n\n      <form onSubmit={handleFormSubmit}>\n        <input\n          type=\"text\"\n          className=\"todoapp__new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={title}\n          onChange={setTitle}\n        />\n      </form>\n    </header>\n  );\n};\n","import React, {\n  useContext, useEffect, useRef, useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { Loader } from '../../Loader';\n\ntype Props = {\n  todo: Todo,\n  removeTodo: (todoId: number) => void,\n  isToggleAll: boolean,\n  handleUpdateTodoFormSubmit: (\n    id: number,\n    completed?: boolean,\n    newTitle?: string,\n  ) => void,\n  isOnRender: boolean,\n};\n\nexport const TodoItem: React.FC<Props> = React.memo(({\n  todo,\n  removeTodo,\n  isToggleAll,\n  handleUpdateTodoFormSubmit,\n  isOnRender,\n}) => {\n  const { title, id } = todo;\n\n  const [completed, setCompleted] = useState(todo.completed);\n  const [updateTodoTitle, setUpdateTodoTitle] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [newTodoTitle, setNewTodoTitle] = useState(title);\n  const [isCancel, setIsCancel] = useState(false);\n  const inputRef = useRef<HTMLInputElement | null>(null);\n\n  useEffect(() => {\n    if (updateTodoTitle) {\n      inputRef.current?.focus();\n    }\n  }, [updateTodoTitle]);\n\n  useEffect(() => {\n    setCompleted(todo.completed);\n    setNewTodoTitle(title);\n    setIsCancel(false);\n  }, [todo.completed, title, isCancel]);\n\n  const handleChange = async (todoId: number, todoCompleted: boolean) => {\n    handleUpdateTodoFormSubmit(todoId, !completed);\n\n    if (isOnRender) {\n      setCompleted(!todoCompleted);\n    }\n  };\n\n  const handleDblClick = () => {\n    setUpdateTodoTitle(true);\n  };\n\n  const saveNewUpdateTodoTitle = (cansel?: boolean) => {\n    if (newTodoTitle.length === 0) {\n      removeTodo(id);\n      setIsLoading(false);\n    } else if (newTodoTitle !== title && !cansel) {\n      setUpdateTodoTitle(false);\n      setIsLoading(true);\n\n      handleUpdateTodoFormSubmit(id, completed, newTodoTitle);\n    }\n\n    setUpdateTodoTitle(false);\n    setIsLoading(false);\n  };\n\n  const cancelChanges = (e: React.KeyboardEvent) => {\n    if (e.key === 'Escape') {\n      saveNewUpdateTodoTitle(true);\n      setIsCancel(true);\n    }\n\n    if (e.key === 'Enter') {\n      saveNewUpdateTodoTitle();\n    }\n  };\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [todo.completed, title]);\n\n  const loadingContext = useContext(Loader);\n\n  return (\n    <div\n      className={classNames(\n        'todo',\n        { completed },\n      )}\n      onDoubleClick={handleDblClick}\n    >\n      {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}\n      <label className=\"todo__status-label\">\n        <input\n          type=\"checkbox\"\n          className=\"todo__status\"\n          checked={completed}\n          onClick={() => handleChange(id, todo.completed)}\n        />\n      </label>\n\n      {updateTodoTitle ? (\n        <input\n          type=\"text\"\n          className=\"todo__title-field\"\n          placeholder=\"Empty todo will be deleted\"\n          value={newTodoTitle}\n          onChange={(e) => setNewTodoTitle(e.target.value)}\n          onBlur={() => saveNewUpdateTodoTitle()}\n          onKeyUp={cancelChanges}\n          ref={inputRef}\n        />\n      ) : (\n        <>\n          <span className=\"todo__title\">{title}</span>\n          <button\n            type=\"button\"\n            className=\"todo__remove\"\n            onClick={() => removeTodo(id)}\n          >\n            ×\n          </button>\n        </>\n      )}\n\n      <div\n        className={classNames(\n          'modal overlay',\n          {\n            'is-active': loadingContext.includes(id)\n            || isToggleAll\n            || isLoading,\n          },\n        )}\n      >\n        <div className=\"modal-background has-background-white-ter\" />\n        <div className=\"loader\" />\n      </div>\n    </div>\n  );\n});\n","import React, { FC } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\ntype Props = {\n  todos: Todo[],\n  removeTodo: (todoId: number) => void,\n  tempTodo: Todo | null,\n  isToggleAll: boolean,\n  handleUpdateTodoFormSubmit: (\n    id: number,\n    completed?: boolean,\n    newTitle?: string,\n  ) => void,\n  isOnRender: boolean,\n};\n\nexport const TodoList: FC<Props> = React.memo(({\n  todos,\n  removeTodo,\n  tempTodo,\n  isToggleAll,\n  handleUpdateTodoFormSubmit,\n  isOnRender,\n}) => (\n  <section className=\"todoapp__main\">\n    {todos.map(todo => (\n      <TodoItem\n        key={todo.id}\n        todo={todo}\n        removeTodo={removeTodo}\n        isToggleAll={isToggleAll}\n        handleUpdateTodoFormSubmit={handleUpdateTodoFormSubmit}\n        isOnRender={isOnRender}\n      />\n    ))}\n\n    {tempTodo && (\n      <TodoItem\n        key={0}\n        todo={tempTodo}\n        removeTodo={removeTodo}\n        isToggleAll={isToggleAll}\n        handleUpdateTodoFormSubmit={handleUpdateTodoFormSubmit}\n        isOnRender={isOnRender}\n      />\n    )}\n  </section>\n));\n","import React from 'react';\nimport classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\nimport { Todo } from '../../types/Todo';\nimport {\n  checkCompletedTodo,\n  counterOfActiveTodos,\n  filterTodos,\n} from '../../helpers/helpers';\nimport { FilterParam } from '../../types/FilterParam';\n\ntype Props = {\n  todos: Todo[],\n  removeTodo: (todoId: number) => void,\n};\n\nexport const Footer: React.FC<Props> = ({\n  todos,\n  removeTodo,\n}) => {\n  const removeCompletedTodos = () => {\n    if (checkCompletedTodo(todos)) {\n      const completedTodos = filterTodos(todos, FilterParam.Completed);\n\n      completedTodos.forEach(todo => removeTodo(todo.id));\n    }\n  };\n\n  return (\n    <footer className=\"todoapp__footer\">\n      <span className=\"todo-count\">\n        {`${counterOfActiveTodos(todos)} items left`}\n      </span>\n\n      <nav className=\"filter\">\n        {Object.values(FilterParam).map(link => (\n          <NavLink\n            key={link}\n            to={`/${link}`}\n            className={({ isActive }) => classNames(\n              'filter__link',\n              {\n                selected: isActive,\n              },\n            )}\n          >\n            {link.charAt(0).toUpperCase() + link.slice(1)}\n          </NavLink>\n        ))}\n      </nav>\n\n      <button\n        type=\"button\"\n        className={classNames(\n          'todoapp__clear-completed',\n          { 'is-invisible': !checkCompletedTodo(todos) },\n        )}\n        onClick={removeCompletedTodos}\n\n      >\n        Clear completed\n      </button>\n\n    </footer>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { ErrorType } from '../../types/ErrorType';\n\ntype Props = {\n  errorType: ErrorType,\n  hasError: boolean,\n  onNotificationClose: () => void,\n};\n\nexport const Error: React.FC<Props> = ({\n  errorType,\n  hasError,\n  onNotificationClose,\n}) => {\n  const [errorMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    switch (errorType) {\n      case ErrorType.Add:\n      case ErrorType.Delete:\n      case ErrorType.Update:\n      case ErrorType.Load:\n        setErrorMessage(`Unable to ${errorType} a todo`);\n        break;\n\n      case ErrorType.EmptyTitle:\n        setErrorMessage('Title can\\'t be empty');\n        break;\n\n      default:\n        setErrorMessage('');\n        break;\n    }\n  }, [errorType]);\n\n  useEffect(() => {\n    const timer = setTimeout(() => onNotificationClose(), 3000);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <div\n      className={classNames(\n        'notification',\n        'is-danger',\n        'is-light',\n        'has-text-weight-normal',\n        {\n          hidden: !hasError,\n        },\n      )}\n    >\n      <button\n        type=\"button\"\n        className=\"delete\"\n        onClick={onNotificationClose}\n        aria-label=\"Close notification about an error\"\n      />\n\n      {errorMessage}\n    </div>\n  );\n};\n","import React, {\n  useCallback, useEffect, useMemo, useState,\n} from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Todo } from '../types/Todo';\nimport { counterOfActiveTodos, filterTodos } from '../helpers/helpers';\nimport {\n  addTodo, deleteTodo, getTodos, patchTodo,\n} from '../api/todos';\nimport { Loader } from '../Loader';\nimport { ErrorType } from '../types/ErrorType';\nimport { Header } from '../components/Header/Header';\nimport { TodoList } from '../components/TodoList/TodoList';\nimport { Footer } from '../components/Footer/Footer';\nimport { Error } from '../components/Error/Error';\nimport { useLocalStorage } from '../utils/useLocalStorage';\n\nconst USER_ID = 6755;\n\nexport const TodoPage: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [hasError, setHasError] = useState(false);\n  const [errorType, setErrorType] = useState<ErrorType>(ErrorType.None);\n  const [title, setTitle] = useState('');\n  const [tempTodo, setTempTodo] = useState<null | Todo>(null);\n  const [loadingTodo, setLoadingTodo] = useState([0]);\n  const [isSending, setIsSending] = useState(false);\n  const [\n    countActiveTodo,\n    setCountActiveTodo,\n  ] = useState(counterOfActiveTodos(todos));\n  const [isToggleAll, setIsToggleAll] = useState(false);\n  const [isOnRender, setIsOnRender] = useState(false);\n  const [storageTodos, setStorageTodos] = useLocalStorage<Todo[]>('todos', []);\n  const { pathname } = useLocation();\n\n  const handleTextChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  };\n\n  const fetchTodos = async () => {\n    try {\n      const todosFromServer = await getTodos(USER_ID);\n\n      setTodos(todosFromServer);\n    } catch (error) {\n      setHasError(true);\n      setErrorType(ErrorType.Load);\n    }\n  };\n\n  const addNewTodo = useCallback((newTodo: Todo): void => {\n    setTodos((oldTodos) => [...oldTodos, newTodo]);\n  }, []);\n\n  const showError = useCallback((error: ErrorType) => {\n    setErrorType(error);\n    setHasError(true);\n  }, []);\n\n  const hideError = useCallback(() => {\n    setHasError(false);\n  }, []);\n\n  const removeTodo = async (todoId: number) => {\n    try {\n      setLoadingTodo(prevTodo => [...prevTodo, todoId]);\n\n      await deleteTodo(todoId);\n      setTodos(todoForDelete => (\n        todoForDelete.filter(todo => todo.id !== todoId)\n      ));\n    } catch {\n      setHasError(true);\n      showError(ErrorType.Delete);\n    } finally {\n      setLoadingTodo([0]);\n    }\n  };\n\n  const addNewTodoInList = async (newTodo:Todo) => {\n    if (!isSending) {\n      try {\n        const downloadNewTodo = await addTodo(USER_ID, newTodo);\n\n        addNewTodo(downloadNewTodo);\n      } catch {\n        showError(ErrorType.Add);\n      } finally {\n        setTitle('');\n        setTempTodo(null);\n        setIsSending(false);\n      }\n    }\n  };\n\n  const handleFormSubmit = (e: React.FocusEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!title.trim()) {\n      showError(ErrorType.EmptyTitle);\n      setTitle('');\n\n      return;\n    }\n\n    const newTodo = {\n      userId: USER_ID,\n      id: 0,\n      title,\n      completed: false,\n    };\n\n    setTempTodo({ ...newTodo });\n    setIsSending(true);\n\n    addNewTodoInList(newTodo);\n  };\n\n  const updateTodo = async (\n    todoId: number,\n    completed?: boolean,\n    newTitle?: string,\n  ) => {\n    setLoadingTodo([todoId]);\n\n    try {\n      await patchTodo(todoId, completed, newTitle);\n      fetchTodos();\n    } catch (error) {\n      showError(ErrorType.Update);\n      setHasError(true);\n      setIsOnRender(true);\n    } finally {\n      setLoadingTodo([0]);\n      setIsToggleAll(false);\n      setIsOnRender(false);\n    }\n  };\n\n  const toggleCompletedAllTodo = () => {\n    todos.forEach(todo => {\n      if (counterOfActiveTodos(todos) > 0) {\n        return todo.completed ? todo : updateTodo(todo.id, !todo.completed);\n      }\n\n      return updateTodo(todo.id, !todo.completed);\n    });\n\n    return setIsToggleAll(true);\n  };\n\n  useMemo(() => {\n    setCountActiveTodo(counterOfActiveTodos(todos));\n  }, [todos]);\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  useEffect(() => {\n    setStorageTodos(todos);\n  }, [todos]);\n\n  if (!USER_ID) {\n    return (\n      <h1>User Not Found</h1>\n    );\n  }\n\n  return (\n    <Loader.Provider value={loadingTodo}>\n      <h1 className=\"todoapp__title\">todos</h1>\n\n      <div className=\"todoapp__content\">\n        <Header\n          title={title}\n          setTitle={handleTextChange}\n          handleFormSubmit={handleFormSubmit}\n          toggleCompletedAllTodo={toggleCompletedAllTodo}\n          countActiveTodo={countActiveTodo}\n          hasTodos={!!todos.length}\n        />\n\n        {(todos.length > 0) && (\n          <>\n            <TodoList\n              todos={filterTodos(storageTodos, pathname)}\n              removeTodo={removeTodo}\n              tempTodo={tempTodo}\n              isToggleAll={isToggleAll}\n              handleUpdateTodoFormSubmit={updateTodo}\n              isOnRender={isOnRender}\n            />\n            <Footer\n              todos={todos}\n              removeTodo={removeTodo}\n            />\n          </>\n        )}\n      </div>\n\n      {hasError && (\n        <Error\n          errorType={errorType}\n          hasError={hasError}\n          onNotificationClose={hideError}\n        />\n      )}\n    </Loader.Provider>\n  );\n};\n","import { useState } from 'react';\n\nexport const useLocalStorage = <T>(\n  key: string,\n  initialValue: T,\n) : [T, (value: T) => void] => {\n  const [data, setData] = useState<T>(\n    JSON.parse(localStorage.getItem(key)!) || initialValue,\n  );\n\n  const saveData = (storageData: T) => {\n    setData(storageData);\n    /* eslint-disable @typescript-eslint/no-non-null-assertion */\n    localStorage.setItem(key, JSON.stringify(storageData));\n  };\n\n  return [data, saveData];\n};\n","import React from 'react';\n\nexport const NotFoundPage: React.FC = () => {\n  return (\n    <div className=\"notification is-danger is-light\">\n      Oops... It seems you are lost. Page not found.\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport './styles/index.scss';\n\nimport { HashRouter, Routes, Route } from 'react-router-dom';\nimport { App } from './App';\nimport { TodoPage } from './Pages/TodoPage';\nimport { PageRouters } from './types/PageRouters';\nimport { NotFoundPage } from './Pages/NotFoundPage';\n\nReactDOM.render(\n  <HashRouter>\n    <Routes>\n      <Route path={`${PageRouters.Home}`} element={<App />}>\n        <Route index element={<TodoPage />} />\n        <Route path={`${PageRouters.All}`} element={<TodoPage />} />\n        <Route path={`${PageRouters.Active}`} element={<TodoPage />} />\n        <Route path={`${PageRouters.Completed}`} element={<TodoPage />} />\n      </Route>\n\n      <Route path={`${PageRouters.NotFound}`} element={<NotFoundPage />} />\n    </Routes>\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}